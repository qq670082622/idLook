//
//  HomeService.m
//  IDLook
//
//  Created by HYH on 2018/5/4.
//  Copyright © 2018年 HYH. All rights reserved.
//

#import "HomeService.h"
#import "HomeHeadView.h"
#import "HomeMainCellA.h"
#import "HomeMainCellB.h"
#import "HomeMainCellC.h"
#import "HomeMainCellD.h"
#import "PlayContinuePopV.h"
#import "UIImage+GIF.h"


@interface HomeService ()

@end

@implementation HomeService

#pragma mark -
#pragma mark - UITableViewDataSource&&UITableViewDelegate

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    if (section==1) {
        return 80;
    }
    return .1f;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return .1f;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 2;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (section==0) {
        return 1;
    }
    return self.dsm.ds.count;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section==0) {
        return 160;
    }
    else
    {
        return 320;
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section==0) {
        static NSString *identifer = @"HomeMainCellA";
        HomeMainCellA *cell = [tableView dequeueReusableCellWithIdentifier:identifer];
        if(!cell)
        {
            cell = [[HomeMainCellA alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifer];
            cell.selectionStyle = UITableViewCellSelectionStyleNone;
            cell.backgroundColor=[UIColor clearColor];
            WeakSelf(self);
            cell.clickType1Block = ^(NSInteger type) {
                if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(didClick1WithType:)]) {
                    [weakself.delegate didClick1WithType:type];
                }
            };
            cell.clickType2Block = ^(NSInteger type) {
                if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(didClick2WithType:)]) {
                    [weakself.delegate didClick2WithType:type];
                }
            };
            cell.EntryMoreRecommendBlock = ^{
                [weakself entryMoreVideoPlayer];
            };
        }
        [cell reloadUI];
        return cell;
    }
    else
    {
        static NSString *identifer = @"HomeMainCellD";
        UserInfoM *info = self.dsm.ds[indexPath.row];
        HomeMainCellD *cell = [tableView dequeueReusableCellWithIdentifier:identifer];
        if(!cell)
        {
            cell = [[HomeMainCellD alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifer];
            cell.selectionStyle = UITableViewCellSelectionStyleNone;
            cell.backgroundColor=[UIColor clearColor];
        }
        [cell reloadUIWithModel:info withSelect:@""];
        WeakSelf(self);
        WeakSelf(cell);
        cell.clickUserInfo = ^{
            if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(didClickUser:withSelect:)]) {
                [weakself.delegate didClickUser:info withSelect:weakcell.typeContent];
            }
        };
        cell.lookUserOffer = ^{
            if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(lookUserPriceInfo:)]) {
                [weakself.delegate lookUserPriceInfo:info];
            }
        };
        cell.playVideWithUrl = ^(NSString * _Nonnull videoUrl) {
            
            if ([[NetworkNoti shareInstance]getNetworkStatus]==AFNetworkReachabilityStatusReachableViaWWAN && [UserInfoManager getWWanAuthPlay]==NO) {
                if ([UserInfoManager getAskEachTime]==YES) {
                    if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(endDeceleratingPlay)]) {
                        [weakself.delegate endDeceleratingPlay];
                    }
                    
                    PlayContinuePopV *popV = [[PlayContinuePopV alloc]init];
                    [popV show];
                    popV.ContinueBlock = ^{
                        if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(playVideoWithVideoUrl:withIndexPath:)]) {
                            [weakself.delegate playVideoWithVideoUrl:videoUrl withIndexPath:indexPath];
                        }
                    };
                }
                else
                {
                    if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(playVideoWithVideoUrl:withIndexPath:)]) {
                        [weakself.delegate playVideoWithVideoUrl:videoUrl withIndexPath:indexPath];
                    }
                }
            }
            else
            {
                if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(playVideoWithVideoUrl:withIndexPath:)]) {
                    [weakself.delegate playVideoWithVideoUrl:videoUrl withIndexPath:indexPath];
                }
            }
        };
        cell.endDeceleratingBlock = ^{
            if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(endDeceleratingPlay)]) {
                [weakself.delegate endDeceleratingPlay];
            }
        };
        return cell;
    }
}

-(UIView*)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section
{
    if (section==1) {
        static NSString *identifer = @"UITableViewHeaderFooterView";
        UITableViewHeaderFooterView *footerView = [tableView dequeueReusableHeaderFooterViewWithIdentifier:identifer];
        if(!footerView)
        {
            footerView = [[UITableViewHeaderFooterView alloc] initWithReuseIdentifier:identifer];            
            UIImageView *imageV=[[UIImageView alloc]init];
            [footerView addSubview:imageV];
            imageV.userInteractionEnabled=YES;
            [imageV mas_makeConstraints:^(MASConstraintMaker *make) {
                make.centerX.mas_equalTo(footerView);
                make.top.mas_equalTo(footerView).offset(0);
                make.size.mas_equalTo(CGSizeMake((UI_SCREEN_WIDTH-40), (UI_SCREEN_WIDTH-40)*12.0/69.0));
            }];
            UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(entryMoreVideoPlayer)];
            [imageV addGestureRecognizer:tap];
            imageV.tag=1000;
        }
        UIImageView *imageV = (UIImageView*)[footerView viewWithTag:1000];
        NSString *imagePath = [[NSBundle mainBundle] pathForResource:@"home_bottom" ofType:@"gif"];
        NSData *imageData = [NSData dataWithContentsOfFile:imagePath];
        UIImage *image = [UIImage sd_animatedGIFWithData:imageData];
        imageV.image = image;
        return footerView;
    }
    return nil;
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    if (indexPath.section==1) {
        UserInfoM *info = self.dsm.ds[indexPath.row];
        HomeMainCellD *cell = [tableView cellForRowAtIndexPath:indexPath];
        if (self.delegate && [self.delegate respondsToSelector:@selector(didClickUser:withSelect:)]) {
            [self.delegate didClickUser:info withSelect:cell.typeContent];
        }
    }
}

-(void)entryMoreVideoPlayer
{
    if (self.delegate && [self.delegate respondsToSelector:@selector(entryMoreRecommend)]) {
        [self.delegate entryMoreRecommend];
    }
}

-(void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    if (self.delegate && [self.delegate respondsToSelector:@selector(scrollUpScreen)]) {
        [self.delegate scrollUpScreen];
    }
}

-(void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    if (self.delegate && [self.delegate respondsToSelector:@selector(scrollViewEndScrollView)]) {
        [self.delegate scrollViewEndScrollView];
    }
}

-(void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint *)targetContentOffset
{
    if (self.delegate && [self.delegate respondsToSelector:@selector(scrollViewEndScrollView)]) {
        [self.delegate scrollViewEndScrollView];
    }
}

@end
