//
//  UserService.m
//  IDLook
//
//  Created by HYH on 2018/5/10.
//  Copyright © 2018年 HYH. All rights reserved.
//

#import "UserService.h"
#import "UserWorksCell.h"
#import "MirrorPhotoCell.h"
#import "MirrorVideoCell.h"
#import "TrialWorkCell.h"
#import "UserHeaderView.h"
#import "NoDataFootV.h"
#import "ModerCardCell.h"
#import "ModelCardMainCell.h"
#import "UserHeaderV.h"
#import "UserInfoCellA.h"
#import "UserInfoCellB.h"

@interface UserService ()
@end

@implementation UserService

#pragma mark -
#pragma mark - UITableViewDataSource&&UITableViewDelegate

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    if (self.dataM.ds.count) {
        //当高度不足时，用headview填充，使其正常滑动
        NSArray *array = self.dataM.ds[self.selectIndex];
        CGFloat totalH = 0.0;
        for (int i = 0 ;i< array.count; i++) {
            NSDictionary *dic = array[i];
            CGFloat height = [[dic objectForKey:kUserInfoVCMCellHeight]floatValue];
            totalH+=height;
        }
        
        CGFloat vHeight =  0.0;
        
        if ([UserInfoManager getUserType]==UserTypePurchaser) {
            vHeight =  (UI_SCREEN_HEIGHT-50-SafeAreaTopHeight-SafeAreaTabBarHeight_IphoneX-50);
        }
        else
        {
            vHeight =  (UI_SCREEN_HEIGHT-SafeAreaTopHeight-SafeAreaTabBarHeight_IphoneX-50);
        }
        
        if (totalH<vHeight) {
            return vHeight-totalH;
        }
    }
    return .1f;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return 50.f;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (self.dataM.ds.count) {
        return [self.dataM.ds[self.selectIndex] count];
    }
    return 0;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSInteger row = indexPath.row;
    UserInfoCellType type = [[(NSDictionary *)self.dataM.ds[self.selectIndex][row] objectForKey:kUserInfoVCMCellType] integerValue];
    if (type==UserInfoCellTypePastWorkVideo) {
        if (self.pastworkType==1) {
            return 200;
        }
        return 170;
    }
    
    return [[(NSDictionary *)self.dataM.ds[self.selectIndex][row] objectForKey:kUserInfoVCMCellHeight] floatValue];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSInteger row = indexPath.row;
    
    NSString *classStr = [(NSDictionary *)self.dataM.ds[self.selectIndex][row] objectForKey:kUserInfoVCMCellClass];
    UserInfoCellType type = [[(NSDictionary *)self.dataM.ds[self.selectIndex][row] objectForKey:kUserInfoVCMCellType] integerValue];
    
    id obj = [tableView dequeueReusableCellWithIdentifier:classStr];
    if(!obj)
    {
        obj = [[NSClassFromString(classStr) alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:classStr];
    }
    
    if (type==UserInfoCellTypePerformType || type==UserInfoCellTypePastWorkVideo)
    {
        NSArray *array =  [(NSDictionary *)self.dataM.ds[self.selectIndex][row] objectForKey:kUserInfoVCMCellData];
        UserInfoCellA *cell = (UserInfoCellA *)obj;
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        [cell reloadUIWithArray:array withType:type witPastworkType:self.pastworkType];
        WeakSelf(self);
        cell.pastworkCutPhotoAndVideo = ^(NSInteger type) {
            weakself.pastworkType=type;
            if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(pastworkCutWithIndexPath:)]) {
                [weakself.delegate pastworkCutWithIndexPath:indexPath];
            }
        };
        cell.lookPastworkBigPhoto = ^(NSArray * _Nonnull array, NSInteger index) {
            if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(lookPastworkPhotoWithArray:withIndex:)]) {
                [weakself.delegate lookPastworkPhotoWithArray:array withIndex:index];
            }
        };
        cell.playVideoWithArray = ^(NSArray * _Nonnull array, NSInteger index) {
            if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(playWorkVideoWithArray:withIndex:)]) {
                [weakself.delegate playWorkVideoWithArray:array withIndex:index];
            }
        };
    }
    else if (type==UserInfoCellTypeIntroduce || type==UserInfoCellTypeModelcard)
    {
        UserInfoCellB *cell = (UserInfoCellB*)obj;
        NSArray *array =  [(NSDictionary *)self.dataM.ds[self.selectIndex][row] objectForKey:kUserInfoVCMCellData];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        [cell reloadUIWithArray:array withType:type];
        TalentModel *model = [array firstObject];
        WeakSelf(self);
        cell.lookBigModelCardPhoto = ^() {
            if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(lookModelCardPhoto:)]) {
                [weakself.delegate lookModelCardPhoto:model.imageurl];
            }
        };
        cell.lookIntroduceVideo = ^{
            if (weakself.delegate && [weakself.delegate respondsToSelector:@selector(playIntroduceWithUrl:)]) {
                [weakself.delegate playIntroduceWithUrl:model.video];
            }
        };
    }
    return obj;
}


-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    
}

-(void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    if (self.delegate && [self.delegate respondsToSelector:@selector(scrolloffY:)]) {
        [self.delegate scrolloffY:scrollView.contentOffset.y];
    }
}


@end
