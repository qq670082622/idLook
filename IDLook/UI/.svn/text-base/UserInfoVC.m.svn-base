//
//  UserInfoVC.m
//  IDLook
//
//  Created by HYH on 2018/5/8.
//  Copyright © 2018年 HYH. All rights reserved.
//

#import "UserInfoVC.h"
#import "UserService.h"
#import "UserInfoTopV.h"
#import "UInfoBottomV.h"
#import "WorkListVC.h"
#import "MirrorPhotoVC.h"
#import "MirrorVideoVC.h"
#import "UserDetialInfoVC.h"
#import "UserInfoVCM.h"
#import "UserHeaderView.h"
#import "PhotoDetialVC.h"
#import "VideoDetialVC.h"
#import "AuditionStep1.h"
#import "ShotStep1.h"
#import "MirrorOrderStep1.h"
#import "TrialOrderStep1.h"
#import "RenewalVC.h"
#import "UserLookCertVC.h"
#import "ModerCardCell.h"
#import "AuthUploadBasicVC.h"
#import "MyAuthStateVC.h"
#import "LookBigImageVC.h"
#import "LookPricePopV.h"
#import "ReportUserVC.h"
#import "UserHeaderV.h"
#import "VideoPlayer.h"
#import "PlaceAuditionOrderVC.h"
#import "PlaceShotOrderVC.h"
#import "SharePopV.h"
#import "ShareManager.h"


@interface UserInfoVC ()<UIScrollViewDelegate,UserServiceDelegate,UserHeaderVDelegate>
{
    VideoPlayer *_player;
}
@property(nonatomic,strong)CustomTableV *tableV;
@property(nonatomic,strong)UserService *service;
@property (nonatomic,strong)UserInfoVCM *dataM;
@property(nonatomic,strong)UserInfoTopV *topV;          //头部大头像
@property(nonatomic,strong)UInfoBottomV *bottomV;     //底部订单视图
@property(nonatomic,strong)UIButton *collectBtn;    //收藏按钮
@property(nonatomic,strong)UserHeaderV *headView;   //类型切换
@property(nonatomic,assign)NSInteger selectIndex;   //当前类型
@end

@implementation UserInfoVC
- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    self.view.backgroundColor=Public_Background_Color;
    
    [self.navigationItem setLeftBarButtonItem:[[UIBarButtonItem alloc] initWithCustomView:[CustomNavVC getLeftWhiteButtonWithTarget:self action:@selector(onGoback)]]];
    
    [self.navigationItem setRightBarButtonItems:@[[[UIBarButtonItem alloc]initWithCustomView:[CustomNavVC getRightBarButtonItemWithTarget:self action:@selector(moreAction) normalImg:@"u_info_report" hilightImg:@"u_info_report"]],[[UIBarButtonItem alloc]initWithCustomView:self.collectBtn],[[UIBarButtonItem alloc]initWithCustomView:[CustomNavVC getRightBarButtonItemWithTarget:self action:@selector(shareAction) normalImg:@"u_info_share" hilightImg:@"u_info_share"]]]];
    
    self.selectIndex=0;
    [self tableV];
    
    [self bottomV];
    
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    //设置导航栏背景图片为一个空的image，这样就透明了
    [self.navigationController.navigationBar setBackgroundImage:[UIImage imageWithColor:[[UIColor whiteColor]colorWithAlphaComponent:(self.tableV.contentOffset.y / SafeAreaTopHeight)>0.99?0.99:(self.tableV.contentOffset.y /SafeAreaTopHeight)]] forBarMetrics:UIBarMetricsDefault];
    //去掉透明后导航栏下边的黑边
    [self.navigationController.navigationBar setShadowImage:[[UIImage alloc] init]];
}

-(void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
//    [self scrolloffY:self.tableV.contentOffset.y];
    [_player destroyPlayer];
    _player = nil;
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    
    //    如果不想让其他页面的导航栏变为透明 需要重置
    [self.navigationController.navigationBar setBackgroundImage:[UIImage imageWithColor:[UIColor whiteColor]] forBarMetrics:UIBarMetricsDefault];
    [self.navigationController.navigationBar setShadowImage:[[UIImage alloc] init]];

    [self stopPlay];
}

-(void)stopPlay
{
    UserInfoCellType type = [[(NSDictionary *)[[self.dataM.ds firstObject]firstObject] objectForKey:kUserInfoVCMCellType] integerValue];
    
    if (type==UserInfoCellTypePerformType) {
        UITableViewCell *obj = [self.tableV cellForRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];
        if ([obj isKindOfClass:[ModerCardCell class]]) {
            ModerCardCell *cell =(ModerCardCell*)obj;
            [cell.player destroyPlayer];
            cell.player=nil;
        }
    }
}

-(void)onGoback
{
    [self.navigationController popViewControllerAnimated:YES];
}

-(UIButton*)collectBtn
{
    if (!_collectBtn) {
        _collectBtn=[CustomNavVC getRightBarButtonItemWithTarget:self action:@selector(collectionAction:) normalImg:@"u_collection" hilightImg:@"icon_collection_h"];
    }
    return _collectBtn;
}

//分享
-(void)shareAction
{
    SharePopV *pop=[[SharePopV alloc]init];
    WeakSelf(self);
    pop.shareBlock=^(NSInteger tag)
    {
        [ShareManager shareWithType:tag withUserInfo:self.dataM.info withViewControll:weakself];
    };
    
    [pop showBottomShare];
}

//收藏
-(void)collectionAction:(UIButton*)sender
{
    
    if ([UserInfoManager getUserLoginType]==UserLoginTypeTourist)
    {
        LoginAndRegistVC *login=[[LoginAndRegistVC alloc]init];
        [self presentViewController:login animated:YES completion:nil];
        return;
    }
    
     [SVProgressHUD showWithMaskType:SVProgressHUDMaskTypeClear];
    NSDictionary *dicArg= @{@"userid":[UserInfoManager getUserUID],
                            @"artistid":self.info.UID,
                            @"type":@(!sender.selected)};
    [AFWebAPI setCollectionArtistWithArg:dicArg callBack:^(BOOL success, id object) {
        if (success) {
            if (!sender.selected) {
                [SVProgressHUD showSuccessWithStatus:@"收藏成功"];
                sender.selected=YES;
            }
            else
            {
                [SVProgressHUD showSuccessWithStatus:@"取消收藏成功"];
                sender.selected=NO;
            }
            
            [[NSNotificationCenter defaultCenter]postNotificationName:@"collectArtist" object:nil];  //收藏/取消成功，通知刷新收藏页面

        }
        else
        {
            AF_SHOW_RESULT_ERROR
        }
    }];
}

//查看授权书
-(void)certificateAction
{
    UserLookCertVC *certVC=[[UserLookCertVC alloc]init];
    certVC.imageUrl=self.dataM.info.authorization1;
    [self.navigationController pushViewController:certVC animated:YES];
}


- (UserInfoVCM *)dataM
{
    if (!_dataM)
    {
        _dataM = [[UserInfoVCM alloc] init];
        _dataM.info=self.info;
        WeakSelf(self);
        _dataM.newDataNeedRefreshed = ^{   //加载出数据，刷新ui
            //刷新头部视图
            [weakself.topV reloadUIWithInfo:weakself.dataM.info];
            weakself.headView.typeViewArray=weakself.dataM.titleArray;

            weakself.service.selectIndex=weakself.selectIndex;
            [weakself.tableV reloadData];
            
            for (int i=0; i<weakself.dataM.titleArray.count; i++) {
                if ([weakself.select isEqualToString:weakself.dataM.titleArray[i]]) {
                    [weakself clickTypeViewWithIndex:i];
                    [weakself.headView moveSliderToPage:i];
                }
            }
            
            if (weakself.dataM.info.isCollection) {
                weakself.collectBtn.selected=YES;
            }
        };
    }
    return _dataM;
}

-(UserService*)service
{
    if (!_service) {
        _service = [[UserService alloc]init];
        _service.dataM=self.dataM;
        _service.delegate=self;
    }
    return _service;
}

-(CustomTableV*)tableV
{
    if (!_tableV) {
        _tableV = [[CustomTableV alloc] initWithFrame:CGRectZero style:UITableViewStyleGrouped];
        _tableV.delegate = self.service;
        _tableV.dataSource = self.service;
        _tableV.separatorStyle=UITableViewCellSeparatorStyleNone;
        _tableV.autoresizingMask = UIViewAutoresizingFlexibleHeight;
        _tableV.showsVerticalScrollIndicator=NO;
        _tableV.showsHorizontalScrollIndicator=NO;
        [self.view addSubview:_tableV];
        _tableV.estimatedRowHeight = 0;
        _tableV.estimatedSectionHeaderHeight = 0;
        _tableV.estimatedSectionFooterHeight = 0;
        _tableV.backgroundColor=[UIColor whiteColor];
        _tableV.tableHeaderView = [self tableHeadV];
        [_tableV mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.mas_equalTo(self.view);
            make.top.mas_equalTo(self.view);
            make.right.mas_equalTo(self.view);
            make.bottom.mas_equalTo(self.bottomV.mas_top);
        }];

    }
    return _tableV;
}

-(UIView*)tableHeadV
{
    UIView *bg = [[UIView alloc]initWithFrame:CGRectMake(0, 0, UI_SCREEN_WIDTH, 200+SafeAreaTopHeight)];
    UserInfoTopV *view = [[UserInfoTopV alloc]initWithFrame:CGRectMake(0, 0, UI_SCREEN_WIDTH,200+SafeAreaTopHeight)];
    __weak __typeof(self)ws=self;
    view.UserInfoTopVDetialInfo = ^{
        [ws entryUserDetialInfo];
    };
    view.UserInfoTopVLookPrice = ^{
        [ws lookUserPrice];
    };
    [view reloadUIWithInfo:self.dataM.info];
    [bg addSubview:view];
    self.topV=view;
    return bg;
}

-(UserHeaderV*)headView
{
    if (!_headView) {
        _headView = [[UserHeaderV alloc]init];
        [self.view addSubview:_headView];
        _headView.frame=CGRectMake(0,200+SafeAreaTopHeight+SafeAreaTopHeight, UI_SCREEN_WIDTH,50);
        WeakSelf(self);
        _headView.delegate=self;
//        [_headView moveSliderToPage:self.selectIndex];
    }
    return _headView;
}


-(UInfoBottomV*)bottomV
{
    if (!_bottomV) {
        _bottomV = [[UInfoBottomV alloc]init];
        [self.view addSubview:_bottomV];
        [_bottomV mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.mas_equalTo(self.view);
            make.right.mas_equalTo(self.view);
            make.bottom.mas_equalTo(self.view).offset(-SafeAreaTabBarHeight_IphoneX);
            make.height.mas_equalTo(50);
        }];
        WeakSelf(self);
        _bottomV.orderClick = ^(NSInteger type) {
            [weakself PlaceorderWithType:type];
        };
        
        //只有购买方才显示下单视图
        if ([UserInfoManager getUserType]==UserTypeResourcer) {
            _bottomV.hidden=YES;
            [_bottomV mas_updateConstraints:^(MASConstraintMaker *make) {
                make.height.mas_equalTo(0);
            }];
        }
        else
        {
            _bottomV.hidden=NO;
            [_bottomV mas_updateConstraints:^(MASConstraintMaker *make) {
                make.height.mas_equalTo(50);
            }];
        }
        
    }
    return _bottomV;
}

//个人详情
-(void)entryUserDetialInfo
{
    UserDetialInfoVC *infoVC=[[UserDetialInfoVC alloc]init];
    infoVC.info=self.dataM.info;
    [self.navigationController pushViewController:infoVC animated:YES];
}


//查看报价
-(void)lookUserPrice
{
    
    if ([UserInfoManager getUserLoginType]) {
        [SVProgressHUD showImage:nil status:@"登录后可查看报价！"];
        return;
    }
    
    //未认证成功，跳到认证界面
    if ([UserInfoManager getUserAuthState]!=1) {
        [self goAuth];
        return;
    }
    
    if (self.dataM.info.priceList.count>0) {
        LookPricePopV *popV= [[LookPricePopV alloc]init];
        [popV showWithArray:self.dataM.info.priceList];
        popV.placeActionBlock = ^(NSInteger type, NSString *title) {
            PlaceShotOrderVC *shotVC=[[PlaceShotOrderVC alloc]init];
            shotVC.info=self.dataM.info;
            shotVC.advType = [self.dataM.info.priceList[type][@"adverttype"]integerValue];
            shotVC.advSubType = [self.dataM.info.priceList[type][@"singletype"]integerValue];
            shotVC.advName = title;
            [self.navigationController pushViewController:shotVC animated:YES];
        };
    }
    else
    {
        [SVProgressHUD showImage:nil status:@"暂无报价！"];
    }
    
}

#pragma mark--UserHeaderVDelegate
-(void)clickTypeViewWithIndex:(NSInteger)index
{
    self.selectIndex=index;
    self.service.selectIndex=index;
    self.service.pastworkType=0;
    [self.tableV reloadData];
}

#pragma mark ---UserServiceDelegate
//进入视频列表界面
-(void)entryVideoListWithType:(UserInfoCellType)type
{
    WorkListVC *workVC=[[WorkListVC alloc]init];
    if (type==UserInfoCellTypeTalentshow) {
        workVC.array=self.dataM.info.acqierement;
    }
    else if (type==UserInfoCellTypePastWorkVideo)
    {
        workVC.array=self.dataM.info.pastWorksVdo;
    }
    [self.navigationController pushViewController:workVC animated:YES];
}

//查看更多微出境图片
-(void)lookmoreMirrorPhoto
{
    MirrorPhotoVC *photoVC=[[MirrorPhotoVC alloc]init];
    
    NSArray *mirrList= self.dataM.info.pastWorksImg;
    NSMutableArray *array = [[NSMutableArray alloc]initWithCapacity:0];
    for (int i = 0 ;i<mirrList.count; i++)
    {
        WorksModel *model = [[WorksModel alloc]initWithPastWorkDic:mirrList[i]];
        [array addObject:model];

    }
    photoVC.info=self.dataM.info;
    photoVC.array=array;
    [self.navigationController pushViewController:photoVC animated:YES];
}

//查看更多微出境视频
-(void)lookmoreMirrorVideo
{
    MirrorVideoVC *videoVC=[[MirrorVideoVC alloc]init];
    NSArray *mirrList= self.dataM.info.pastWorksVdo;
    NSMutableArray *array = [[NSMutableArray alloc]initWithCapacity:0];
    
    for (int i = 0 ;i<mirrList.count; i++)
    {
        WorksModel *model = [[WorksModel alloc]initWithMirrDic:mirrList[i]];
        
        if (model.microtype==1) {
            model.type=@"授权视频";
            [array addObject:model];
        }
    }
    videoVC.info=self.dataM.info;

    videoVC.array=array;
    [self.navigationController pushViewController:videoVC animated:YES];
}

//查看更多试葩间作品
-(void)lookmoreTrialWorks
{
    MirrorVideoVC *videoVC=[[MirrorVideoVC alloc]init];
    
    NSMutableArray *array = [[NSMutableArray alloc]initWithCapacity:0];
    
    for (int i = 0 ;i<self.dataM.info.exoticroom.count; i++)
    {
        WorksModel *model = [[WorksModel alloc]initWithMirrDic:
                             self.dataM.info.exoticroom[i]];
        [array addObject:model];
    }
    videoVC.array=array;
    videoVC.info=self.dataM.info;

    [self.navigationController pushViewController:videoVC animated:YES];
}

//查看微出镜，试葩间详情
-(void)lookWorksDetialWithModel:(WorksModel *)model
{
    if (model.microtype==1) {  //过往作品图片
        LookBigImageVC *lookImage=[[LookBigImageVC alloc]init];
        lookImage.isShowDown=YES;
        [lookImage showWithImageArray:@[model.url] curImgIndex:0 AbsRect:CGRectMake(0, 0,100,100)];
        [self.navigationController pushViewController:lookImage animated:YES];
    }
    else
    {
        VideoDetialVC *lookVC = [[VideoDetialVC alloc]init];
        lookVC.model=model;
        lookVC.info=self.dataM.info;
        [self.navigationController pushViewController:lookVC animated:YES];
    }
}


//微出镜视频，照片 ，试葩间视频  下单
-(void)buyWorksWithModel:(WorksModel *)model
{
    //未登陆
    if ([UserInfoManager getUserLoginType]==UserLoginTypeTourist)
    {
        [self goLogin];
        return;
    }
    
    //未认证成功，跳到认证界面
    if ([UserInfoManager getUserAuthState]!=1) {
        [self goAuth];
        return;
    }
    
    if (model.microtype==0||model.microtype==1) {   //微出镜下单
        MirrorOrderStep1 *orderStep1 = [[MirrorOrderStep1 alloc]init];
        orderStep1.workModel=model;
        orderStep1.info=self.dataM.info;
        [self.navigationController pushViewController:orderStep1 animated:YES];
    }
    else   //试葩间下单
    {
        TrialOrderStep1 *orderStep1 = [[TrialOrderStep1 alloc]init];
        orderStep1.workModel=model;
        orderStep1.info=self.dataM.info;
        [self.navigationController pushViewController:orderStep1 animated:YES];
    }
}

//查看模特卡大图
-(void)lookModelCardPhoto:(NSString *)url
{
    LookBigImageVC *lookImage=[[LookBigImageVC alloc]init];
    lookImage.isShowDown=YES;
    [lookImage showWithImageArray:@[url] curImgIndex:0 AbsRect:CGRectMake(0, 0,100,100)];
    [self.navigationController pushViewController:lookImage animated:YES];
}

//播放自我介绍视频
-(void)playIntroduceWithUrl:(NSString *)url
{
    [_player destroyPlayer];
    _player = nil;
    
    _player = [[VideoPlayer alloc] init];
    _player.videoUrl =url;
    _player.onlyFullScreen=YES;
    
    _player.completedPlayingBlock = ^(VideoPlayer *player) {
        [player destroyPlayer];
        _player = nil;
    };
}

//过往作品，图片视频切换
-(void)pastworkCutWithIndexPath:(NSIndexPath *)indexPath
{
    [self.tableV reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];
}

//查看过往作品图片
-(void)lookPastworkPhotoWithArray:(NSArray*)array withIndex:(NSInteger)index
{
    LookBigImageVC *lookImage=[[LookBigImageVC alloc]init];
    lookImage.isShowDown=YES;
    [lookImage showWithImageArray:array curImgIndex:index AbsRect:CGRectMake(0, 0,100,100)];
    [self.navigationController pushViewController:lookImage animated:YES];
}

//播放视频组
-(void)playWorkVideoWithArray:(NSArray*)array withIndex:(NSInteger)index
{
    [_player destroyPlayer];
    _player = nil;
    
    _player = [[VideoPlayer alloc] init];
    _player.videoUrl =array[index];
    _player.onlyFullScreen=YES;
    
    _player.completedPlayingBlock = ^(VideoPlayer *player) {
        [player destroyPlayer];
        _player = nil;
    };
}

//下单
-(void)PlaceorderWithType:(NSInteger)type
{
    //未登陆
    if ([UserInfoManager getUserLoginType]==UserLoginTypeTourist)
    {
        [self goLogin];
        return;
    }
    
    //未认证成功，跳到认证界面
    if ([UserInfoManager getUserAuthState]!=1) {
        [self goAuth];
        return;
    }
    
    if (type==0) { //试镜
        PlaceAuditionOrderVC *auditVC = [[PlaceAuditionOrderVC alloc]init];
        auditVC.info=self.dataM.info;
        [self.navigationController pushViewController:auditVC animated:YES];
    }
    else if (type==1)
    {
        PlaceShotOrderVC *shotVC=[[PlaceShotOrderVC alloc]init];
        shotVC.info=self.dataM.info;
        [self.navigationController pushViewController:shotVC animated:YES];
    }
    else if (type==2)
    {
        RenewalVC *reneVC=[[RenewalVC alloc]init];
        reneVC.info=self.dataM.info;
        [self.navigationController pushViewController:reneVC animated:YES];
    }
}


//table偏移
-(void)scrolloffY:(CGFloat)offY
{
    if(offY<200)
    {
        [self.navigationItem setTitleView:nil];
        self.headView.frame=CGRectMake(0,200+SafeAreaTopHeight-offY, UI_SCREEN_WIDTH, 50);

    }
    else
    {
        [self.navigationItem setTitleView:[CustomNavVC setDefaultNavgationItemTitle:self.dataM.info.nick]];
        self.headView.frame=CGRectMake(0,SafeAreaTopHeight, UI_SCREEN_WIDTH,50);

    }
    
    [self.navigationController.navigationBar setBackgroundImage:[UIImage imageWithColor:[[UIColor whiteColor]colorWithAlphaComponent:(offY/(200))>0.99?0.99:(offY /(200))]] forBarMetrics:UIBarMetricsDefault];
    [self.navigationController.navigationBar setShadowImage:[[UIImage alloc] init]];
    
    if (offY >0) return;
    [self.topV changeImageFrameWithOffY:offY];
    
}

#pragma mark---未登录，先去登录
-(void)goLogin
{
    LoginAndRegistVC *login=[[LoginAndRegistVC alloc]init];
    [self presentViewController:login animated:YES completion:nil];
}

#pragma mark --未认证，先去认证
-(void)goAuth
{
    if ([UserInfoManager getUserAuthState]==3){  //审核中
        [SVProgressHUD showImage:nil status:@"你的认证信息正在审核中，通过后才能下单！"];
        return;
    }
    
    UIAlertController *alert=[UIAlertController alertControllerWithTitle:@"去认证" message:@"认证通过之后您才能下单！" preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *action0 = [UIAlertAction actionWithTitle:@"去认证"
                                                      style:UIAlertActionStyleDestructive
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                        
                                                        if ([UserInfoManager getUserAuthState]==0) {
                                                            AuthUploadBasicVC *authVC=[[AuthUploadBasicVC alloc]init];
                                                            authVC.hidesBottomBarWhenPushed=YES;
                                                            [self.navigationController pushViewController:authVC animated:YES];
                                                        }
                                                        else if ([UserInfoManager getUserAuthState]==2 || [UserInfoManager getUserAuthState]==3)
                                                        {
                                                            MyAuthStateVC *stateVC=[[MyAuthStateVC alloc]init];
                                                            stateVC.authState=[UserInfoManager getUserAuthState];
                                                            stateVC.hidesBottomBarWhenPushed=YES;
                                                            [self.navigationController pushViewController:stateVC animated:YES];
                                                        }
                                                    }];
    UIAlertAction *action1 = [UIAlertAction actionWithTitle:@"取消"
                                                      style:UIAlertActionStyleCancel
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                    }];
    [alert addAction:action0];
    [alert addAction:action1];
    [self presentViewController:alert animated:YES completion:^{}];
}

//更多
-(void)moreAction
{
    if ([UserInfoManager getUserLoginType]==UserLoginTypeTourist)
    {
        LoginAndRegistVC *login=[[LoginAndRegistVC alloc]init];
        [self presentViewController:login animated:YES completion:nil];
        return;
    }
    
    UIAlertController *alert=[UIAlertController alertControllerWithTitle:@"更多操作" message:nil preferredStyle:UIAlertControllerStyleActionSheet];

    UIAlertAction *action1 = [UIAlertAction actionWithTitle:@"举报"
                                                      style:UIAlertActionStyleDefault
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                        [self reportUser];
                                                    }];
    UIAlertAction *action2 = [UIAlertAction actionWithTitle:@"拉黑"
                                                      style:UIAlertActionStyleDefault
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                        [self PullblackUser];
                                                    }];
    
    UIAlertAction *action3 = [UIAlertAction actionWithTitle:@"取消"
                                                      style:UIAlertActionStyleCancel
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                    }];
    
    [alert addAction:action1];
    [alert addAction:action2];
    [alert addAction:action3];


    [self presentViewController:alert animated:YES completion:^{}];
}

//举报
-(void)reportUser
{
    ReportUserVC *reportVC=[[ReportUserVC alloc]init];
    reportVC.info=self.dataM.info;
    [self.navigationController pushViewController:reportVC animated:YES];
}

//拉黑
-(void)PullblackUser
{
    UIAlertController *alert=[UIAlertController alertControllerWithTitle:@"确定要拉黑TA吗？" message:@"拉黑后你将不再看到对方的资料" preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *action0 = [UIAlertAction actionWithTitle:@"拉黑"
                                                      style:UIAlertActionStyleDefault
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                        
                                                         [SVProgressHUD showWithMaskType:SVProgressHUDMaskTypeClear];
                                                        NSDictionary *dicArg = @{@"userid":[UserInfoManager getUserUID],
                                                                                 @"creativeid":self.info.UID,
                                                                                 @"type":@(1)};
                                                        [AFWebAPI getPullBlackUserWithArg:dicArg callBack:^(BOOL success, id object) {
                                                            if (success) {
                                                                [SVProgressHUD showSuccessWithStatus:@"用户已拉黑"];
                                                            }
                                                            else
                                                            {
                                                                AF_SHOW_RESULT_ERROR
                                                            }
                                                        }];
                                                        
                                                    }];
    
    UIAlertAction *action1 = [UIAlertAction actionWithTitle:@"取消"
                                                      style:UIAlertActionStyleCancel
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                    }];
    
    [alert addAction:action0];
    [alert addAction:action1];
    
    [self presentViewController:alert animated:YES completion:^{}];
}

@end
