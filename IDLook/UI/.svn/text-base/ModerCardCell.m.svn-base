//
//  ModerCardCell.m
//  IDLook
//
//  Created by HYH on 2018/5/12.
//  Copyright © 2018年 HYH. All rights reserved.
//

#import "ModerCardCell.h"
#import "ModelCardMainCell.h"
#import "ModelCardSliderV.h"

@interface ModerCardCell ()<ModelCardSliderVDelegate,UIScrollViewDelegate,UITableViewDelegate,UITableViewDataSource>

@property (nonatomic,assign)NSInteger currentIndex;
@property (nonatomic,strong)UIScrollView *scrollV;
@property (nonatomic,strong)NSArray *dataS;
@property(nonatomic,strong)ModelCardSliderV *sliderView;

@end

@implementation ModerCardCell

-(id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    if (self=[super initWithStyle:style reuseIdentifier:reuseIdentifier]) {
    }
    return self;
}


-(ModelCardSliderV*)sliderView
{
    if (!_sliderView) {
        
        _sliderView =[[ModelCardSliderV alloc] initWithFrame:CGRectMake(0, 0, UI_SCREEN_WIDTH, 55)];
        _sliderView.delegate=self;
        [self.contentView addSubview:_sliderView];
        _sliderView.backgroundColor=[UIColor clearColor];
    }
    return _sliderView;
}

- (UIScrollView *)scrollV
{
    if(!_scrollV)
    {
        _scrollV = [[UIScrollView alloc] initWithFrame:CGRectZero];
        _scrollV.pagingEnabled = YES;
        _scrollV.delegate = self;
        _scrollV.bounces=NO;
        _scrollV.backgroundColor = [UIColor clearColor];
        _scrollV.showsHorizontalScrollIndicator = NO;
        _scrollV.showsVerticalScrollIndicator = NO;
        [self.contentView addSubview:_scrollV];
        [_scrollV mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.mas_equalTo(self.contentView);
            make.right.mas_equalTo(self.contentView);
            make.bottom.mas_equalTo(self.contentView);
            make.top.mas_equalTo(self.contentView).offset(55);
        }];

    }
    return _scrollV;
}

-(void)reloadUIWithArray:(NSArray *)array
{
    self.dataS=array;
    for (UIView *view in self.scrollV.subviews) {
        [view removeFromSuperview];
    }
    
    for (UIView *view in self.sliderView.subviews) {
        [view removeFromSuperview];
    }
    

    NSMutableArray *arr = [[NSMutableArray alloc]initWithCapacity:0];
    
    for (int i = 0; i<array.count; i++) {
        NSDictionary *dic = array[i];
        [arr addObject:dic[@"name"]];
    }
    self.sliderView.typeViewArray = arr;
    [self.sliderView moveSliderToPage:self.currentIndex];

    self.scrollV.contentSize = CGSizeMake(UI_SCREEN_WIDTH*array.count, 0);
    
    for (int i =0; i<array.count; i++) {
        CustomTableV *tableV = [[CustomTableV alloc] initWithFrame:CGRectMake(UI_SCREEN_WIDTH*i,0,UI_SCREEN_WIDTH,self.scrollV.bounds.size.height) style:UITableViewStylePlain];
        tableV.delegate = self;
        tableV.dataSource = self;
        tableV.tag=1000+i;
        tableV.bounces=NO;
        tableV.separatorStyle=UITableViewCellSeparatorStyleNone;
        tableV.autoresizingMask = UIViewAutoresizingFlexibleHeight;
        [self.scrollV addSubview:tableV];
        tableV.estimatedRowHeight = 0;
        tableV.estimatedSectionHeaderHeight = 0;
        tableV.estimatedSectionFooterHeight = 0;
        tableV.backgroundColor=[UIColor clearColor];
    }
}

#pragma mark -
#pragma mark - UITableViewDataSource&&UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    return .1f;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return .1f;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    NSDictionary *dic = self.dataS[tableView.tag-1000];
    NSArray *list = dic[@"list"];
    return list.count;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
//    if (indexPath.row==0) {
//        return (UI_SCREEN_WIDTH-30)/1.4+20;
//    }
//    else
//    {
//        return (UI_SCREEN_WIDTH-30)/1.78+20;
//    }
    
    NSDictionary *dic = self.dataS[tableView.tag-1000];
    NSArray *list = dic[@"list"];
    TalentModel *model = list[indexPath.row];
    if (model.isModelCard) {
        return (UI_SCREEN_WIDTH-30)/1.4+20;
    }
    return (UI_SCREEN_WIDTH-30)/1.78+20;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *identifer = @"UITableViewCell";
    ModelCardMainCell *cell = [tableView dequeueReusableCellWithIdentifier:identifer];
    if(!cell)
    {
        cell = [[ModelCardMainCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifer];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        cell.backgroundColor=[UIColor clearColor];
    }
    NSDictionary *dic = self.dataS[tableView.tag-1000];
    NSArray *list = dic[@"list"];
    [cell reloadUIWithModel:list[indexPath.row]];
    return cell;
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    NSDictionary *dic = self.dataS[self.currentIndex];
    NSArray *list = dic[@"list"];
    TalentModel *model = list[indexPath.row];
    
    if (model.isModelCard==1) {
        [self lookBigWithIndexPath:indexPath];
    }
    else
    {
        [self showVideoPlayerIndexPath:indexPath];
    }
}

#pragma mark---UIScrollViewDelegate
-(void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    if(scrollView.tag==0)
    {
        int curePage = (int) scrollView.contentOffset.x / UI_SCREEN_WIDTH;
        
        self.currentIndex = curePage;
        
        [self.sliderView moveSliderToPage:self.currentIndex];
        
        [_player destroyPlayer];
        _player = nil;
        
        self.typeClick(self.currentIndex);

    }
}

#pragma mark---ModelCardSliderVDelegate
-(void)clickTypeViewWithIndex:(NSInteger)index
{
    self.currentIndex = index;
    [self.scrollV setContentOffset:CGPointMake(UI_SCREEN_WIDTH*index, 0) animated:YES];
    
    self.typeClick(self.currentIndex);
    
    [_player destroyPlayer];
    _player = nil;
}

-(void)delectWithIndex:(NSInteger)index
{}

- (void)showVideoPlayerIndexPath:(NSIndexPath *)indexPath
{
    [_player destroyPlayer];
    _player = nil;
    
    CustomTableV *tableV = [self getCurrentTableViewWithTag:self.currentIndex];
    
    ModelCardMainCell *cell = [tableV cellForRowAtIndexPath:indexPath];
    
    _player = [[VideoPlayer alloc] init];
    _player.layer.masksToBounds=YES;
    _player.layer.cornerRadius=5.0;
    
    NSDictionary *dic = self.dataS[self.currentIndex];
    NSArray *list = dic[@"list"];
    TalentModel *model = list[indexPath.row];
    
    _player.videoUrl =model.video;
    
    [_player playerBindTableView:tableV currentIndexPath:indexPath];
    _player.frame = CGRectMake(15,10, cell.bounds.size.width-30, cell.bounds.size.height-20);
    
    [cell.contentView addSubview:_player];
    
    _player.completedPlayingBlock = ^(VideoPlayer *player) {
        [player destroyPlayer];
        _player = nil;
    };
}

//根据tag等到tableView
-(CustomTableV*)getCurrentTableViewWithTag:(NSInteger)tag
{
    CustomTableV *tableV=[self.scrollV viewWithTag:1000+tag];
    
    return tableV;
}

-(void)lookBigWithIndexPath:(NSIndexPath*)indexPath
{
    NSDictionary *dic = self.dataS[self.currentIndex];
    
    NSArray *list = dic[@"list"];
    TalentModel *model = list[indexPath.row];
    
    self.lookBigPhoto(model.imageurl);
}

@end


