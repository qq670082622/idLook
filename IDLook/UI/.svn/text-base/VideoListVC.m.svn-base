//
//  VideoListVC.m
//  IDLook
//
//  Created by Mr Hu on 2018/10/11.
//  Copyright © 2018年 HYH. All rights reserved.
//

#import "VideoListVC.h"
#import "HomeMainCellD.h"
#import "VideoPlayer.h"
#import "VideoListTopV.h"
#import "VideoListPopV.h"
#import "ScreenPopV.h"
#import "LookPricePopV.h"
#import "AuthUploadBasicVC.h"
#import "MyAuthStateVC.h"
#import "PlaceShotOrderVC.h"
#import "TalentModel.h"

@interface VideoListVC ()<UITableViewDelegate,UITableViewDataSource,UIScrollViewDelegate>
{
    VideoPlayer *_player;
}
@property(nonatomic,strong)CustomTableV *tableV;
@property(nonatomic,strong)VideoListTopV *topV;
@property(nonatomic,strong)NSDictionary *screenConditionDic;  //筛选条件类容
@property(nonatomic,strong)NSMutableArray *dataSource;
@property(nonatomic,assign)NSInteger comprSelect;  //综合0，竞争力1，颜值2
@property(nonatomic,assign)NSInteger topSelect;     //综合0，报价1，年龄2
@property(nonatomic,assign)BOOL offerLowToHigh;    //报价是否低到高，默认no倒序高到低
@property(nonatomic,assign)BOOL ageLowToHigh;    //年龄是否低到高，默认no倒序高到低
@property(nonatomic,strong)NSIndexPath *currentIndexPath;

@end

@implementation VideoListVC

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [_player destroyPlayer];
    _player = nil;

}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    self.view.backgroundColor=Public_Background_Color;
    
    NSArray *list = self.dic[@"lists"];
    [self.navigationItem setTitleView:[CustomNavVC setAttributeNavgationItemTitle1:self.dic[@"catename"] withTitle2:[NSString stringWithFormat:@"_%@",list[self.subType][@"attrname"]]]];
    
    [self.navigationItem setLeftBarButtonItem:[[UIBarButtonItem alloc] initWithCustomView:[CustomNavVC getLeftDefaultButtonWithTarget:self action:@selector(onGoback)]]];

    self.dataSource= [NSMutableArray new];
    [self topV];
    [self tableV];
    [self refreshDataWithSortPage:1 withRefreshType:RefreshTypePullDown];
}

-(void)onGoback
{
    [self.navigationController popViewControllerAnimated:YES];
}

-(void)refreshDataWithSortPage:(NSInteger)sortpage withRefreshType:(RefreshType)type
{
    NSMutableDictionary *dicArg = [[NSMutableDictionary alloc]initWithDictionary:self.screenConditionDic];
    [dicArg setObject:@(1)forKey:@"occupation"];
    [dicArg setObject:@(sortpage) forKey:@"sortpage"];
    [dicArg setObject:@"30" forKey:@"pagenumber"];
    [dicArg setObject:@(self.type) forKey:@"ageidentity"];
    [dicArg setObject:[UserInfoManager getUserUID] forKey:@"userid"];
    [dicArg setObject:@"30" forKey:@"pagenumber"];

    
    if (self.topSelect==0) {
        [dicArg setObject:@"desc" forKey:@"colligate"];   //综合
    }
    else if (self.topSelect==1) {
        [dicArg setObject:self.offerLowToHigh==YES?@"asc":@"desc" forKey:@"quote"];    //报价
    }

    
    NSArray *list = self.dic[@"lists"];
    [dicArg setObject:list[self.subType][@"attrname"] forKey:@"figuretype"];
    
    [AFWebAPI getScreenVideoListWithArg:dicArg callBack:^(BOOL success, id object) {
        if (success) {
            [SVProgressHUD dismiss];
            if (type==RefreshTypePullDown) {
                [self.dataSource removeAllObjects];
            }
            NSArray *array= (NSArray*)safeObjectForKey(object, JSON_data);;
            
            for (int i = 0; i<array.count; i++) {
                UserInfoM *info = [[UserInfoM alloc]initWithDic:array[i]];
                [self.dataSource addObject:info];
            }
            [self.tableV reloadData];
            [self.tableV hideNoDataScene];
            if (self.dataSource.count==0) {
                [self.tableV showWithNoDataType:NoDataTypeSearchResult];
            }
        }
        else
        {
            AF_SHOW_RESULT_ERROR
            [self.tableV hideNoDataScene];
            if (self.dataSource.count==0) {
                [self.tableV showWithNoDataType:NoDataTypeNetwork];
            }
        }
        [self.tableV headerEndRefreshing];
        [self.tableV footerEndRefreshing];
    }];
}

-(VideoListTopV*)topV
{
    if (!_topV) {
        _topV=[[VideoListTopV alloc]initWithFrame:CGRectMake(0, 0, UI_SCREEN_WIDTH, 45)];
        [self.view addSubview:_topV];
        WeakSelf(self);
        _topV.selectWithType = ^(NSInteger type) {
            if (type==0) {
                if (weakself.topSelect==type) {
                    return ;
                }
            }
            else
            {
                if (weakself.topSelect==0) {
                    weakself.offerLowToHigh=YES;
                }
                else
                {
                    weakself.offerLowToHigh=!weakself.offerLowToHigh;
                }
            }
            weakself.topSelect=type;
            [weakself.tableV setContentOffset:CGPointMake(0, 0)];
            [weakself.tableV headerBeginRefreshing];
        };
        _topV.screenAction = ^{
            ScreenPopV *spopV = [[ScreenPopV alloc]init];
            spopV.selectDic=weakself.screenConditionDic;
            [spopV showWithType:weakself.type];
            spopV.confrimBlock = ^(NSDictionary *dic) {
                weakself.screenConditionDic=dic;
                [weakself.tableV setContentOffset:CGPointMake(0, 0)];
                [weakself.tableV headerBeginRefreshing];
            };
        };
    }
    return _topV;
}

-(CustomTableV*)tableV
{
    if (!_tableV) {
        _tableV = [[CustomTableV alloc] initWithFrame:CGRectMake(0,45,UI_SCREEN_WIDTH,UI_SCREEN_HEIGHT-45) style:UITableViewStyleGrouped];
        _tableV.delegate = self;
        _tableV.dataSource = self;
        _tableV.separatorStyle=UITableViewCellSeparatorStyleNone;
        _tableV.autoresizingMask = UIViewAutoresizingFlexibleHeight;
        _tableV.showsVerticalScrollIndicator=NO;
        _tableV.showsHorizontalScrollIndicator=NO;
        [self.view addSubview:_tableV];
        _tableV.estimatedRowHeight = 0;
        _tableV.estimatedSectionHeaderHeight = 0;
        _tableV.estimatedSectionFooterHeight = 0;
        _tableV.backgroundColor=[UIColor clearColor];
        [_tableV addHeaderWithTarget:self action:@selector(pullDownToRefresh:)];
        [_tableV addFooterWithTarget:self action:@selector(pullUpToRefresh:)];
    }
    return _tableV;
}

-(void)pullDownToRefresh:(id)sender
{
    [self refreshDataWithSortPage:1 withRefreshType:RefreshTypePullDown];
}

-(void)pullUpToRefresh:(id)sender
{
    UserInfoM *info = [self.dataSource lastObject];
    [self refreshDataWithSortPage:info.sortpage+1 withRefreshType:RefreshTypePullUp];
}


#pragma mark -
#pragma mark - UITableViewDataSource&&UITableViewDelegate

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    return 10.f;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return 20.f;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{

    return self.dataSource.count;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 320;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *identifer = @"HomeMainCellD";
    UserInfoM *info = self.dataSource[indexPath.row];
    HomeMainCellD *cell = [tableView dequeueReusableCellWithIdentifier:identifer];
    if(!cell)
    {
        cell = [[HomeMainCellD alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifer];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        cell.backgroundColor=[UIColor clearColor];
    }
    NSArray *list = self.dic[@"lists"];
    [cell reloadUIWithModel:info withSelect:list[self.subType][@"attrname"]];
    WeakSelf(self);
    cell.lookUserOffer = ^{
        [weakself lookUserPriceInfo:info];
    };
    cell.playVideWithUrl = ^(NSString * _Nonnull videoUrl) {
        [weakself playVideoWithVideoUrl:videoUrl withIndexPath:indexPath];
    };
    cell.endDeceleratingBlock = ^{
        [weakself endDeceleratingPlay];
    };
    return cell;
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    HomeMainCellD *cell = [self.tableV cellForRowAtIndexPath:indexPath];
    UserInfoM *info = self.dataSource[indexPath.row];
    UserInfoVC *userInfoVC=[[UserInfoVC alloc]init];
    userInfoVC.info =info;
    userInfoVC.select=cell.typeContent;
    [self.navigationController pushViewController:userInfoVC animated:YES];
}

-(void)playVideoWithVideoUrl:(NSString *)url withIndexPath:(NSIndexPath *)indexPath
{
    self.currentIndexPath=indexPath;
    [_player destroyPlayer];
    _player = nil;
    
    HomeMainCellD *cell = [self.tableV cellForRowAtIndexPath:indexPath];
    
    _player = [[VideoPlayer alloc] init];
    _player.isMute=[UserInfoManager getListPlayIsMute];
    _player.videoUrl =url;
    [_player playerBindTableView:self.tableV currentIndexPath:indexPath];
    
    _player.frame = CGRectMake(22,108,UI_SCREEN_WIDTH-44,186);
    [cell.contentView addSubview:_player];
    
    _player.completedPlayingBlock = ^(VideoPlayer *player) {
        [player destroyPlayer];
        player = nil;
    };
}

//结束播放
-(void)endDeceleratingPlay
{
    [_player destroyPlayer];
    _player =nil;
}

-(void)scrollViewEndScrollView
{
    if ([[NetworkNoti shareInstance]getNetworkStatus]==AFNetworkReachabilityStatusReachableViaWWAN && [UserInfoManager getWWanAuthPlay]==NO) {
        return;
    }
    else if ([[NetworkNoti shareInstance]getNetworkStatus]==AFNetworkReachabilityStatusReachableViaWiFi && [UserInfoManager getWifiAuthPlay]==NO)
    {
        return;
    }
    
    NSArray<NSIndexPath *> * cellArr = [self.tableV indexPathsForVisibleRows];
    if (cellArr.count>=2) {
        NSIndexPath * currentIndexPath = cellArr[cellArr.count - 2];
        if (self.currentIndexPath==currentIndexPath) {
            return;
        }
        if (cellArr.count==2 &&currentIndexPath.section==0) {
            return;
        }
        UserInfoM *info = self.dataSource[currentIndexPath.row];
        
        if (info.showlist.count==0) {
            return;
        }
        
        NSDictionary *list = info.showlist[0][@"lists"];
        NSArray *talent = (NSArray*)safeObjectForKey(list, @"talent");
        NSArray *pastwork = (NSArray*)safeObjectForKey(list, @"pastwork");
        NSArray *modelcard = (NSArray*)safeObjectForKey(list, @"modelcard");
        
        NSString *url;
        if (talent.count>0) {
            TalentModel *model = [[TalentModel alloc]initTalentDic:[talent firstObject]];
            url = model.video;
        }
        else if (pastwork.count>0)
        {
            WorksModel *model = [[WorksModel alloc]initWithPastWorkDic:[pastwork firstObject]];
            url = model.url;
        }
        else if (modelcard.count>0)
        {
            TalentModel *model = [[TalentModel alloc]initModelCardDic:[modelcard firstObject]];
            url = model.video;
        }
        
        [self playVideoWithVideoUrl:url withIndexPath:currentIndexPath];
    }
}



//查看报价
-(void)lookUserPriceInfo:(UserInfoM *)info
{
    if ([UserInfoManager getUserLoginType]==UserLoginTypeTourist) {
        [SVProgressHUD showImage:nil status:@"登录后可查看报价！"];
        return;
    }
    
    //未认证成功，跳到认证界面
    if ([UserInfoManager getUserAuthState]!=1) {
        [self goAuth];
        return;
    }
    
    NSDictionary *dicArg = @{@"userid":info.UID};
    [AFWebAPI getQuotaListWithArg:dicArg callBack:^(BOOL success, id object) {
        if (success) {
            [SVProgressHUD dismiss];
            NSArray *array =[object objectForKey:JSON_data];
            if (array.count>0) {
                LookPricePopV *popV= [[LookPricePopV alloc]init];
                [popV showWithArray:array];
                popV.placeActionBlock = ^(NSInteger type, NSString *title) {
                    PlaceShotOrderVC *shotVC=[[PlaceShotOrderVC alloc]init];
                    shotVC.info=info;
                    shotVC.advType = [array[type][@"adverttype"]integerValue];
                    shotVC.advSubType = [array[type][@"singletype"]integerValue];
                    shotVC.advName = title;
                    [self.navigationController pushViewController:shotVC animated:YES];
                };
            }
            else
            {
                [SVProgressHUD showImage:nil status:@"暂无报价！"];
                return;
            }
        }
        else
        {
            AF_SHOW_RESULT_ERROR
        }
    }];
}

#pragma mark --未认证，先去认证
-(void)goAuth
{
    if ([UserInfoManager getUserAuthState]==3){  //审核中
        [SVProgressHUD showImage:nil status:@"你的认证信息正在审核中，通过后才能查看报价！"];
        return;
    }
    
    UIAlertController *alert=[UIAlertController alertControllerWithTitle:@"去认证" message:@"认证通过之后您才能查看报价！" preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *action0 = [UIAlertAction actionWithTitle:@"去认证"
                                                      style:UIAlertActionStyleDestructive
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                        
                                                        if ([UserInfoManager getUserAuthState]==0) {
                                                            AuthUploadBasicVC *authVC=[[AuthUploadBasicVC alloc]init];
                                                            authVC.hidesBottomBarWhenPushed=YES;
                                                            [self.navigationController pushViewController:authVC animated:YES];
                                                        }
                                                        else if ([UserInfoManager getUserAuthState]==2 || [UserInfoManager getUserAuthState]==3)
                                                        {
                                                            MyAuthStateVC *stateVC=[[MyAuthStateVC alloc]init];
                                                            stateVC.authState=[UserInfoManager getUserAuthState];
                                                            stateVC.hidesBottomBarWhenPushed=YES;
                                                            [self.navigationController pushViewController:stateVC animated:YES];
                                                        }
                                                    }];
    UIAlertAction *action1 = [UIAlertAction actionWithTitle:@"取消"
                                                      style:UIAlertActionStyleCancel
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                    }];
    [alert addAction:action0];
    [alert addAction:action1];
    [self presentViewController:alert animated:YES completion:^{}];
}

-(void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    [_player playerScrollIsSupportSmallWindowPlay:NO];
}

-(void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    [self scrollViewEndScrollView];
}

-(void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint *)targetContentOffset
{
    [self scrollViewEndScrollView];
}
@end
