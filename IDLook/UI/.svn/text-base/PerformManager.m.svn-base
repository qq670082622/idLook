//
//  PerformManager.m
//  IDLook
//
//  Created by Mr Hu on 2018/9/21.
//  Copyright © 2018年 HYH. All rights reserved.
//

#import "PerformManager.h"
#import "WorkCellA.h"
#import "ModelCardMainCell.h"

@implementation PerformManager

#pragma mark -
#pragma mark -UICollectionViewDelegateFlowLayout
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return [self.dataM.ds[0][section] count];
}

-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return [self.dataM.ds[0]count];
}

-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    WorksModel *model = (WorksModel*) self.dataM.ds[0][indexPath.section][indexPath.row];
    WorkCellA *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"WorkCellA" forIndexPath:indexPath];
    cell.backgroundColor=[UIColor clearColor];
    [cell reloadUIWithModel:model];
    WeakSelf(self);
    cell.chooseAction = ^(BOOL select) {
        weakself.chooseAction(select, indexPath);
    };
    cell.playAction = ^{
        weakself.playAction(model);
    };
    return cell;
}

-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    return CGSizeMake((UI_SCREEN_WIDTH-45)/2, (UI_SCREEN_WIDTH-45)/2 * (188.0/336.0));
}

-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(15,15,15,15);
}

-(CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section
{
    return CGSizeMake(0,35);
}

-(UICollectionReusableView*)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath
{
    if ([kind isEqualToString:UICollectionElementKindSectionHeader]) {
        UICollectionReusableView *headView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:@"headView" forIndexPath:indexPath];
        
        for (UIView *view in headView.subviews) {
            [view removeFromSuperview];
        }
        
        UILabel  *titleLab = [[UILabel alloc] initWithFrame:CGRectMake(15, 20, 100, 30)];
        [headView addSubview:titleLab];
        WorksModel *model = (WorksModel*) self.dataM.ds[0][indexPath.section][indexPath.row];
        
        titleLab.text=model.type;
        
        [titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.mas_equalTo(headView).offset(15);
            make.bottom.mas_equalTo(headView);
        }];
        return  headView;
    }
    else
    {
        return nil;
    }
}



#pragma mark -
#pragma mark - UITableViewDataSource&&UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    return .1f;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return .1f;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    NSArray *dataS = self.dataM.ds[1];
    NSDictionary *dic = dataS[tableView.tag-1000];
    NSArray *list = dic[@"list"];
    return list.count;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.row==0) {
        return (UI_SCREEN_WIDTH-30)/1.4+20;
    }
    return (UI_SCREEN_WIDTH-30)/1.78+20;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *identifer = @"UITableViewCell";
    ModelCardMainCell *cell = [tableView dequeueReusableCellWithIdentifier:identifer];
    if(!cell)
    {
        cell = [[ModelCardMainCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifer];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        cell.backgroundColor=[UIColor clearColor];
        if (indexPath.row==0) {
            UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(lookBigImage:)];
            [cell addGestureRecognizer:tap];
        }
        else if (indexPath.row==1) {
            UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(showVideoPlayer:)];
            [cell addGestureRecognizer:tap];
            cell.tag=tableView.tag+100;
        }
    }
    NSArray *dataS = self.dataM.ds[1];
    NSDictionary *dic = dataS[tableView.tag-1000];
    NSArray *list = dic[@"list"];
    [cell reloadUIWithModel:list[indexPath.row]];
    return cell;
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}


-(void)lookBigImage:(UITapGestureRecognizer*)tap
{
    NSArray *dataS = self.dataM.ds[1];

    NSMutableArray *array = [[NSMutableArray alloc]initWithCapacity:0];
    for (int i =0; i<dataS.count; i++) {
        NSDictionary *dic = dataS[i];
        NSArray *list = dic[@"list"];
        TalentModel *mode = [list firstObject];
        [array addObject:mode.imageurl];
    }
    
    if (self.lookModelcardPhoto) {
        self.lookModelcardPhoto(array);
    }
}

-(void)showVideoPlayer:(UITapGestureRecognizer*)tap
{
    NSArray *dataS = self.dataM.ds[1];

    NSDictionary *dic = dataS[tap.view.tag-100-1000];
    NSArray *list = dic[@"list"];
    TalentModel *mode = [list lastObject];
    
    if (self.playVideWithUrl) {
        self.playVideWithUrl(mode.video);
    }
}


@end
