//
//  MyOrderMainVC.m
//  IDLook
//
//  Created by HYH on 2018/5/21.
//  Copyright © 2018年 HYH. All rights reserved.
//

#import "MyOrderMainVC.h"
#import "MyOrderTopV.h"
#import "MyOrderAudotionCellA.h"
#import "MyOrderAudotionCellB.h"
#import "MyOrderShotCell.h"
#import "MyOrderMirrorCell.h"
#import "MyOrderTrialCell.h"
#import "MyOrderRenewalCell.h"
#import "MyOrderVCM.h"
#import "OrderDetialVC.h"
#import "RejectOrderPopV.h"
#import "AcceptOrderPopV.h"
#import "OfferPopV.h"
#import "PayWaysVC.h"
#import "PriceModel.h"
#import "AuditionStep1.h"
#import "PlaceShotOrderVC.h"
#import "AuthPopV.h"
#import "IdentityAuthVC.h"
#import "MyAuthStateVC.h"

@interface MyOrderMainVC ()<UIScrollViewDelegate,UITableViewDelegate,UITableViewDataSource,UIImagePickerControllerDelegate,UINavigationControllerDelegate,AuditionCellADelegate,AuditionCellBDelegate,MyOrderShotCellADelegate>
@property (nonatomic,strong)MyOrderTopV *topV;
@property (nonatomic,strong)UIScrollView *scrollV;
@property (nonatomic,strong)MyOrderVCM *dsm;
@property (nonatomic,strong)NSIndexPath *indexPath;
@end

@implementation MyOrderMainVC

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    self.view.backgroundColor=Public_Background_Color;
    [self.navigationItem setTitleView:[CustomNavVC setDefaultNavgationItemTitle:@"我的订单"]];
    [self.navigationItem setLeftBarButtonItem:[[UIBarButtonItem alloc] initWithCustomView:[CustomNavVC getLeftDefaultButtonWithTarget:self action:@selector(onGoback)]]];
    
    [self dsm];
    [self topV];
    [self scrollV];
    
}

-(void)onGoback
{
    [self.navigationController popViewControllerAnimated:YES];
}

-(void)refreshData
{
    CustomTableV *tableV=[self correspondingTableViewWithTag:self.currIndex];
    [tableV startLoading];
    [self.dsm refreshOrderListCallBack:^(BOOL success) {
        if (success) {
            
            [tableV hideNoDataScene];
            NSInteger count= [self.dsm.ds[self.currIndex] count];
            if (count==0) {
                [tableV showWithNoDataType:NoDataTypeOrder];
            }
        }
        else
        {
            [tableV hideNoDataScene];
            NSInteger count= [self.dsm.ds[self.currIndex] count];
            if (count==0) {
                [tableV showWithNoDataType:NoDataTypeNetwork];
            }
        }
        [tableV reloadData];
        [tableV headerEndRefreshing];
    }];
}

-(MyOrderVCM*)dsm
{
    if (!_dsm) {
        _dsm=[[MyOrderVCM alloc]init];
        [self refreshData];
    }
    return _dsm;
}


-(MyOrderTopV*)topV
{
    if (!_topV) {
        _topV=[[MyOrderTopV alloc]initWithCUrePage:self.currIndex];
        [self.view addSubview:_topV];
        [_topV mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.mas_equalTo(self.view);
            make.left.mas_equalTo(self.view);
            make.right.mas_equalTo(self.view);
            make.height.mas_equalTo(40);
        }];
        WeakSelf(self);
        _topV.orderClickTypeBlock = ^(NSInteger type) {
            if (weakself.currIndex!=type) {

                [weakself.scrollV setContentOffset:CGPointMake(UI_SCREEN_WIDTH*type, 0) animated:YES];
                
                weakself.currIndex=type;
                CustomTableV *tableV = [weakself correspondingTableViewWithTag:weakself.currIndex];
                NSInteger count= [weakself.dsm.ds[weakself.currIndex] count];
                if (count==0) {
                    [tableV showWithNoDataType:NoDataTypeOrder];
                }
                else
                {
                    [tableV hideNoDataScene];
                }
                [tableV reloadData];
            }
        };
    }
    return _topV;
}

- (UIScrollView *)scrollV
{
    if(!_scrollV)
    {
        _scrollV = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 40, UI_SCREEN_WIDTH, UI_SCREEN_HEIGHT-SafeAreaTopHeight-40-SafeAreaTabBarHeight_IphoneX)];
        _scrollV.delegate = self;
        _scrollV.pagingEnabled=YES;
        _scrollV.scrollEnabled = NO;
        _scrollV.backgroundColor = [UIColor clearColor];
        _scrollV.showsHorizontalScrollIndicator = NO;
        _scrollV.showsVerticalScrollIndicator = NO;
        [self.view addSubview:_scrollV];
        _scrollV.contentSize = CGSizeMake(UI_SCREEN_WIDTH*5, 0);
        
        for (int i =0; i<5; i++) {
            CustomTableV *tableV = [[CustomTableV alloc] initWithFrame:CGRectMake(UI_SCREEN_WIDTH*i,0,UI_SCREEN_WIDTH,UI_SCREEN_HEIGHT-SafeAreaTopHeight-40-SafeAreaTabBarHeight_IphoneX) style:UITableViewStyleGrouped];
            tableV.delegate = self;
            tableV.dataSource = self;
            tableV.tag=100+i;
            tableV.bounces=YES;
            tableV.separatorStyle=UITableViewCellSeparatorStyleNone;
            tableV.autoresizingMask = UIViewAutoresizingFlexibleHeight;
            [self.scrollV addSubview:tableV];
            tableV.estimatedRowHeight = 0;
            tableV.estimatedSectionHeaderHeight = 0;
            tableV.estimatedSectionFooterHeight = 0;
            tableV.backgroundColor=[UIColor clearColor];
            [tableV addHeaderWithTarget:self action:@selector(pullDownToRefresh:)];
        }
        _scrollV.contentOffset=CGPointMake(UI_SCREEN_WIDTH*self.currIndex, 0);
    }
    return _scrollV;
}

-(void)pullDownToRefresh:(id)sender
{
    [self refreshData];
}

#pragma mark -
#pragma mark - UITableViewDataSource&&UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    return .1f;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return 10.0;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return [self.dsm.ds[self.currIndex] count];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return 1;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if ([self.dsm.ds[self.currIndex]count]<=indexPath.section) {
        NSLog(@"---height---");
        return 0.0;
    }
    return [[(NSDictionary *)self.dsm.ds[self.currIndex][indexPath.section] objectForKey:kMyOrderVCMCellHeight] floatValue];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSInteger sec = indexPath.section;
    if ([self.dsm.ds[self.currIndex]count]<=sec) {
        static NSString *identifer = @"UITableViewCell";
        UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifer];
        if(!cell)
        {
            cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifer];
            cell.selectionStyle = UITableViewCellSelectionStyleNone;
            cell.backgroundColor=[UIColor whiteColor];
        }
        return cell;
    }
    
    NSString *classStr = [(NSDictionary *)self.dsm.ds[self.currIndex][sec] objectForKey:kMyOrderVCMCellClass];
    OrderModel *model = [(NSDictionary *)self.dsm.ds[self.currIndex][sec] objectForKey:kMyOrderVCMCellData];
    
    id obj = [tableView dequeueReusableCellWithIdentifier:classStr];
    if(!obj)
    {
        obj = [[NSClassFromString(classStr) alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:classStr];
    }
    
    if ([classStr isEqualToString:@"MyOrderAudotionCellA"]) {
        MyOrderAudotionCellA *cell = (MyOrderAudotionCellA *)obj;
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        cell.indexPath=indexPath;
        cell.delegate=self;
        [cell reloadUIWithModel:model];
    }
    else if ([classStr isEqualToString:@"MyOrderAudotionCellB"])
    {
        MyOrderAudotionCellB *cell = (MyOrderAudotionCellB *)obj;
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        cell.indexPath=indexPath;
        cell.delegate=self;
        [cell reloadUIWithModel:model];
    }
    else if ([classStr isEqualToString:@"MyOrderShotCell"])
    {
        MyOrderShotCell *cell = (MyOrderShotCell *)obj;
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        cell.indexPath=indexPath;
        cell.delegate=self;
        [cell reloadUIWithModel:model];
    }
    else if ([classStr isEqualToString:@"MyOrderMirrorCell"])
    {
        MyOrderMirrorCell *cell = (MyOrderMirrorCell *)obj;
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        [cell reloadUIWithModel:model];
    }
    else if ([classStr isEqualToString:@"MyOrderTrialCell"])
    {
        MyOrderTrialCell *cell = (MyOrderTrialCell *)obj;
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        [cell reloadUIWithModel:model];
    }
    else if ([classStr isEqualToString:@"MyOrderRenewalCell"])
    {
        MyOrderRenewalCell *cell = (MyOrderRenewalCell *)obj;
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        [cell reloadUIWithModel:model];
    }
    return obj;

}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    OrderModel *model = [(NSDictionary *)self.dsm.ds[self.currIndex][indexPath.section] objectForKey:kMyOrderVCMCellData];

    OrderDetialVC *detialVc = [[OrderDetialVC alloc]init];
    detialVc.model = model;
    WeakSelf(self);
    detialVc.isRefreshData = ^{
        [weakself refreshData];
    };
    [self.navigationController pushViewController:detialVc animated:YES];

}

#pragma mark--
//根据tag得到当前tableView
-(CustomTableV*)correspondingTableViewWithTag:(NSInteger)tag
{
    CustomTableV *tableV=[self.scrollV viewWithTag:tag+100];
    return tableV;
}

#pragma mark----AuditionCellADelegate
//接单,上传视频
-(void)acceptOrderWithIndexPath:(NSIndexPath *)indexPath
{
    self.indexPath=indexPath;
    OrderModel *model = [(NSDictionary *)self.dsm.ds[self.currIndex][indexPath.section] objectForKey:kMyOrderVCMCellData];

    if ([model.orderstate isEqualToString:@"paied"] || [model.orderstate isEqualToString:@"paiedone"]) {
        [self acceltOrderActionWithIndexPath:indexPath];
    }
    else if ([model.orderstate isEqualToString:@"acceptted"])
    {
        [self uploadVideoWithType:0];
    }
    else if ([model.orderstate isEqualToString:@"videouploaded"])
    {
        
    }
}

-(void)acceptWithIndexParh:(NSIndexPath*)indexPath
{
     [SVProgressHUD showWithMaskType:SVProgressHUDMaskTypeClear];
    
    OrderModel *model = [(NSDictionary *)self.dsm.ds[self.currIndex][indexPath.section] objectForKey:kMyOrderVCMCellData];
    
    NSDictionary *dicArg=@{@"orderid":model.orderId,
                           @"userid":[UserInfoManager getUserUID]};
    
    [AFWebAPI getAcceptOrder:dicArg callBack:^(BOOL success, id object) {
        if (success) {
            [SVProgressHUD dismiss];
            [self refreshData];
        }
        else
        {
            AF_SHOW_RESULT_ERROR
        }
    }];
}

//上传视频/图片
- (void)uploadVideoWithType:(NSInteger)type
{
    UIImagePickerController *picker = [[UIImagePickerController alloc] init];
    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
    picker.delegate = self;
    picker.allowsEditing = NO;
    NSArray *availableMedia = [UIImagePickerController availableMediaTypesForSourceType:UIImagePickerControllerSourceTypeCamera];//Camera所支持的Media格式都有哪些,共有两个分别是@"public.image",@"public.movie"
    
    //手机试镜视频
    if (type==0) {
        picker.mediaTypes = [NSArray arrayWithObject:availableMedia[1]]; //设置媒体类型为public.image
    }
    else   //拍摄上传授权书
    {
        picker.mediaTypes = [NSArray arrayWithObject:availableMedia[0]];//设置媒体类型为public.movie
    }
    
    [self presentViewController:picker animated:YES completion:^{}];
}

#pragma mark -
#pragma mark - UIImagePickerControllerDelegate
-(void)imagePickerController:(UIImagePickerController*)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{
    OrderModel *model = [(NSDictionary *)self.dsm.ds[self.currIndex][self.indexPath.section] objectForKey:kMyOrderVCMCellData];

    NSString *type = [info objectForKey:UIImagePickerControllerMediaType];
    if ([type isEqualToString:@"public.movie"]) {
        NSURL *url = [info objectForKey:UIImagePickerControllerMediaURL];
        NSString *URLStr = [NSString stringWithFormat:@"%@",url];
        NSData *file = [NSData dataWithContentsOfURL:url];
        
        [SVProgressHUD showWithStatus:@"正在上传视频" maskType:SVProgressHUDMaskTypeClear];
        NSDictionary *dicArg=@{@"orderid":model.orderId,
                               @"userid":model.actorid};
        [AFWebAPI uploadVideoAuditionOrder:dicArg data:file callBack:^(BOOL success, id object) {
            if (success) {
                [SVProgressHUD showSuccessWithStatus:@"视频已上传！"];
                [self refreshData];
            }
            else
            {
                AF_SHOW_RESULT_ERROR
            }
        }];
    }
    else if ([type isEqualToString:@"public.image"]) {
        UIImage* image = [info objectForKey:UIImagePickerControllerOriginalImage];
        
        [SVProgressHUD showWithStatus:@"正在上传授权书" maskType:SVProgressHUDMaskTypeClear];
        NSDictionary *dicArg=@{@"orderid":model.orderId,
                               @"userid":model.actorid};
        [AFWebAPI uploadShotOrderCertificationWithArg:dicArg data:UIImageJPEGRepresentation(image, 1.0) callBack:^(BOOL success, id object) {
            if (success) {
                [SVProgressHUD showSuccessWithStatus:@"授权书已上传"];
                [self refreshData];
            }
            else
            {
                AF_SHOW_RESULT_ERROR
            }
        }];

    }
    
    
    [picker dismissViewControllerAnimated:YES completion:^{}];
}

- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    [picker dismissViewControllerAnimated:YES completion:^{}];
}


//接单
-(void)acceltOrderActionWithIndexPath:(NSIndexPath*)indexPath
{
    if ([UserInfoManager getUserAuthState]!=1) {
        AuthPopV *popV = [[AuthPopV alloc]init];
        [popV show];
        popV.goAuthBlock = ^{
            if ([UserInfoManager getUserAuthState]==0) {
                IdentityAuthVC *authVC=[[IdentityAuthVC alloc]init];
                [self.navigationController pushViewController:authVC animated:YES];
            }
            else if ([UserInfoManager getUserAuthState]==2 || [UserInfoManager getUserAuthState]==3)
            {
                MyAuthStateVC *stateVC=[[MyAuthStateVC alloc]init];
                stateVC.authState=[UserInfoManager getUserAuthState];
                [self.navigationController pushViewController:stateVC animated:YES];
            }
        };
        return;
    }
    
    UIAlertController *alert=[UIAlertController alertControllerWithTitle:@"接单" message:@"确定要接单吗?" preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *action0 = [UIAlertAction actionWithTitle:@"接单"
                                                      style:UIAlertActionStyleDestructive
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                        [self acceptWithIndexParh:indexPath];
                                                    }];
    UIAlertAction *action1 = [UIAlertAction actionWithTitle:@"取消"
                                                      style:UIAlertActionStyleCancel
                                                    handler:^(UIAlertAction * _Nonnull action) {
                                                    }];
    [alert addAction:action0];
    [alert addAction:action1];
    [self presentViewController:alert animated:YES completion:^{}];
}

//拒单
-(void)rejectOrderWithIndexPath:(NSIndexPath *)indexPath
{
    self.indexPath=indexPath;

    RejectOrderPopV *popV=[[RejectOrderPopV alloc]init];
    [popV show];
    WeakSelf(self);
    popV.rejectWithReason = ^(NSString *reason) {
        [weakself rejectWithReason:reason withIndexPath:indexPath];
    };
}

-(void)rejectWithReason:(NSString*)reason withIndexPath:(NSIndexPath*)indexPath
{
     [SVProgressHUD showWithMaskType:SVProgressHUDMaskTypeClear];
    OrderModel *model = [(NSDictionary *)self.dsm.ds[self.currIndex][indexPath.section] objectForKey:kMyOrderVCMCellData];
    
    NSDictionary *dicArg=@{@"orderid":model.orderId,
                           @"msg":reason,
                           @"userid":[UserInfoManager getUserUID]};
    
    [AFWebAPI getRejectOrder:dicArg callBack:^(BOOL success, id object) {
        if (success) {
            [SVProgressHUD showSuccessWithStatus:@"订单已拒绝"];
            
            [self refreshData];
        }
        else
        {
            AF_SHOW_RESULT_ERROR
        }
    }];
}

#pragma mark--AuditionCellBDelegate
//付款，确认完成
-(void)playAndFinishOrderWithIndexPath:(NSIndexPath *)indexPath
{
    self.indexPath=indexPath;

    OrderModel *model = [(NSDictionary *)self.dsm.ds[self.currIndex][indexPath.section] objectForKey:kMyOrderVCMCellData];
     if ([model.orderstate isEqualToString:@"new"]) {
         PayWaysVC *payVC=[[PayWaysVC alloc]init];
         payVC.orderModel=model;
         WeakSelf(self);
         payVC.refreshData = ^{
             [weakself refreshData];
         };
         [self.navigationController pushViewController:payVC animated:YES];
     }
     else if ([model.orderstate isEqualToString:@"videouploaded"])
     {
          [SVProgressHUD showWithMaskType:SVProgressHUDMaskTypeClear];

         NSDictionary *dicArg=@{@"orderid":model.orderId,
                                @"userid":[UserInfoManager getUserUID]};
         [AFWebAPI finishOrder:dicArg callBack:^(BOOL success, id object) {
             if (success) {
                 [SVProgressHUD showSuccessWithStatus:@"订单已完成"];
                 
                 [self refreshData];
             }
             else
             {
                 AF_SHOW_RESULT_ERROR
             }
         }];
     }
    else if ([model.orderstate isEqualToString:@"finished"])  //下拍摄订单
    {
        UserInfoM *info = [[UserInfoM alloc]init];
        info.UID=model.actorid;
        info.nick=model.actorNick;
        info.head=model.actorHead;
        PlaceShotOrderVC *shotVC=[[PlaceShotOrderVC alloc]init];
        shotVC.info=info;
        shotVC.model=model;
        [self.navigationController pushViewController:shotVC animated:YES];
    }

}

-(void)buyerAuditOrderWithIndexPath:(NSIndexPath *)indexPath
{
    self.indexPath=indexPath;
    OrderModel *model = [(NSDictionary *)self.dsm.ds[self.currIndex][indexPath.section] objectForKey:kMyOrderVCMCellData];
    if ([model.orderstate isEqualToString:@"finished"])  //重新下试镜订单
    {

    }
}

#pragma mark ---MyOrderShotCellADelegate
//拍摄 拒单
-(void)shotOrderRejectWithIndexPath:(NSIndexPath *)indexPath
{
    self.indexPath=indexPath;

    OrderModel *model = [(NSDictionary *)self.dsm.ds[self.currIndex][indexPath.section] objectForKey:kMyOrderVCMCellData];
    if ([model.orderstate isEqualToString:@"paiedone"]) {
        RejectOrderPopV *popV=[[RejectOrderPopV alloc]init];
        [popV show];
        WeakSelf(self);
        popV.rejectWithReason = ^(NSString *reason) {
            [weakself rejectWithReason:reason withIndexPath:indexPath];
            [self refreshData];

        };
    }
    else if ([model.orderstate isEqualToString:@"pricereport"])  //拒绝报价
    {
    }

}

//拍摄 接单，报价，接受报价，付首款，上传授权书，付尾款，完成
-(void)shotOrderAcceptWithIndexPath:(NSIndexPath *)indexPath withType:(NSInteger)type
{
    self.indexPath=indexPath;
    OrderModel *model = [(NSDictionary *)self.dsm.ds[self.currIndex][indexPath.section] objectForKey:kMyOrderVCMCellData];
    if (type==0) {  //付首款
        PayWaysVC *payVC=[[PayWaysVC alloc]init];
        payVC.orderModel=model;
        WeakSelf(self);
        payVC.refreshData = ^{
            [weakself refreshData];
        };
        [self.navigationController pushViewController:payVC animated:YES];
    }
    else if (type==1) //接单
    {
        [self acceptOrderWithIndexPath:indexPath];
    }
    else if (type==2)  //付尾款
    {
        PayWaysVC *payVC=[[PayWaysVC alloc]init];
        payVC.orderModel=model;
        WeakSelf(self);
        payVC.refreshData = ^{
            [weakself refreshData];
        };
        [self.navigationController pushViewController:payVC animated:YES];
    }
    else if (type==3)  //确认完成
    {
         [SVProgressHUD showWithMaskType:SVProgressHUDMaskTypeClear];
        NSDictionary *dicArg=@{@"orderid":model.orderId,
                               @"userid":[UserInfoManager getUserUID]};
        [AFWebAPI finishOrder:dicArg callBack:^(BOOL success, id object) {
            if (success) {
                [SVProgressHUD showSuccessWithStatus:@"订单已完成"];
                
                [self refreshData];
            }
            else
            {
                AF_SHOW_RESULT_ERROR
            }
        }];
    }
}

@end
